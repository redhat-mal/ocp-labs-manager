---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  labels:
    app.kubernetes.io/name: maven-build-binary-build
  name: maven-build-image-pipeline
  namespace: {{ .Values.pipeline.namespace }}
spec:
  workspaces:
  - name: local-tssc-repo
  params:
    - name: NAMESPACE_TO
      type: string
      default: att-stage
    - name: NAMESPACE_FROM
      type: string
      default: att-demo
    - name: APP_NAME
      type: string
      default: pipeline-sample-app
    - name: IMAGE_TAG
      type: string
      default: latest
    - name: ARGO_RESOURCE_FILE_PATH
      type: string
      default: "./helm/argo-app/values.yaml"
    - name: GOOGLE_CHAT_SECRET
      type: string
      default: None
    - name: APP_CHARTS_DIR
      type: string
      default: helm/argo-app
    - name: APP_STAGING_BRANCH
      type: string
      default: stage
  resources:
  - name: maven-build-image-pipeline-git
    type: git
  tasks:
  - name: compile
    taskRef:
      name: mvn
      kind: Task
    workspaces:
    - name: maven-repo
      workspace: local-tssc-repo
    params:
      - name: GOALS
        value:
        - "compile"
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
  - name: unit-test
    taskRef:
      name: mvn
      kind: Task
    workspaces:
    - name: maven-repo
      workspace: local-tssc-repo
    runAfter:
    - compile
    params:
      - name: GOALS
        value: 
        - "test"
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
  - name: sonar-scan
    taskRef:
      name: sonar-scan
    workspaces:
    - name: maven-repo
      workspace: local-tssc-repo
    params:
    - name: SONAR_USER
      value: "{{ .Values.sonar.username }}"
    - name: SONAR_PASSWORD
      value: "{{ .Values.sonar.password }}"
    - name: SONAR_URL
      value: "{{ .Values.sonar.route }}"
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    runAfter:
    - compile
  - name: get-version
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    taskRef:
      name: get-pom-version
    params:
      - name: default-version
        value: "2.0"
    runAfter:
    - compile
  - name: get-build-id
    taskRef:
      name: generate-build-id
    params:
      - name: base-version
        value: "$(tasks.get-version.results.pom-version)"
    runAfter:
    - get-version
  - name: build-image
    params:
    - name: toNamespace
      value: "$(params.NAMESPACE_TO)"
    - name: fromNamespace
      value: "$(params.NAMESPACE_FROM)"
    - name: appName
      value: "$(params.APP_NAME)"
    - name: imageTag
      #value: "$(params.IMAGE_TAG)"
      value: "$(tasks.get-build-id.results.build-id)"
    taskRef:
      name: maven-build-binary-build
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    runAfter:
    - get-build-id
    - sonar-scan
    - unit-test
  - name: update-app-image-tag
    params:
    - name: filePath
      value: "$(params.ARGO_RESOURCE_FILE_PATH)"
    - name: imageTag
      value: "$(tasks.get-build-id.results.build-id)"
    - name: gitBranch
      value: "$(params.APP_STAGING_BRANCH)"
    taskRef:
      name: update-repo-image-tag
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    runAfter:
    - build-image
  - name: update-helm-app
    params:
    - name: charts_dir
      value: "$(params.APP_CHARTS_DIR)"
    - name: release_name
      value: "$(params.APP_NAME)-stage"
    - name: release_namespace
      value: "{{ .Values.pipeline.tools_namespace }}"
    - name: git_branch
      value: "stage"
    taskRef:
      name: helm-upgrade-from-source
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    runAfter:
    - update-app-image-tag
  - name: create-qa-pull-req
    params:
    - name: filePath
      value: "$(params.ARGO_RESOURCE_FILE_PATH)"
    - name: imageTag
      value: "$(tasks.get-build-id.results.build-id)"
    taskRef:
      name: create-pull-request
    resources:
      inputs:
      - name: source
        resource: maven-build-image-pipeline-git
    runAfter:
    - update-app-image-tag
{{- if .Values.pipeline.googlechat_secret  }}
  - name: notify-googlechat
    params:
    - name: token-secret
      value: "$(params.GOOGLE_CHAT_SECRET)"
    - name: message
      value: "Pipeline run complete for $(params.APP_NAME), App can be promted to QA by approving the pull request: $(tasks.create-qa-pull-req.results.pull-request)"
    taskRef:
      name: send-to-google-chat
    runAfter:
    - create-qa-pull-req
{{- end }}
